"use server"

interface TelegramMessage {
  chat_id: string
  text: string
  parse_mode?: string
}

async function sendToTelegram(name: string, phone: string) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN
  const chatIds = process.env.TELEGRAM_CHAT_IDS || process.env.TELEGRAM_CHAT_ID

  if (!botToken || !chatIds) {
    console.warn("Telegram bot token or chat IDs not configured")
    return false
  }

  // –†–∞–∑–¥–µ–ª—è–µ–º ID —á–∞—Ç–æ–≤ –ø–æ –∑–∞–ø—è—Ç–æ–π –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
  const chatIdList = chatIds
    .split(",")
    .map((id) => id.trim())
    .filter((id) => id.length > 0)

  if (chatIdList.length === 0) {
    console.warn("No valid chat IDs found")
    return false
  }

  const message = `üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞*

üë§ *–ò–º—è:* ${name}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${phone}
‚è∞ *–í—Ä–µ–º—è:* ${new Date().toLocaleString("ru-RU", {
    timeZone: "Europe/Moscow",
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
    hour: "2-digit",
    minute: "2-digit",
  })}

üíº *–£—Å–ª—É–≥–∞:* –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —Ñ—É–ª—Ñ–∏–ª–º–µ–Ω—Ç—É`

  let successCount = 0
  const totalChats = chatIdList.length

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —á–∞—Ç—ã
  for (const chatId of chatIdList) {
    try {
      const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          parse_mode: "Markdown",
        } as TelegramMessage),
      })

      if (response.ok) {
        successCount++
        console.log(`Message sent successfully to chat ${chatId}`)
      } else {
        const errorData = await response.json()
        console.error(`Failed to send message to chat ${chatId}:`, errorData)
      }
    } catch (error) {
      console.error(`Error sending message to chat ${chatId}:`, error)
    }
  }

  console.log(`Telegram delivery: ${successCount}/${totalChats} chats`)
  return successCount > 0
}

export async function submitContactForm(formData: FormData) {
  // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  await new Promise((resolve) => setTimeout(resolve, 1000))

  const name = formData.get("name") as string
  const phone = formData.get("phone") as string

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  if (!name || !phone) {
    return {
      success: false,
      message: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è",
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
  const telegramSent = await sendToTelegram(name, phone)

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log("–ü–æ–ª—É—á–µ–Ω—ã –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", { name, phone })
  console.log("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram:", telegramSent)

  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ CRM, –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ email
  // –ù–∞–ø—Ä–∏–º–µ—Ä:
  // await saveToCRM({ name, phone })
  // await sendEmail({ name, phone })

  return {
    success: true,
    message: `–°–ø–∞—Å–∏–±–æ, ${name}! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –ø–æ –Ω–æ–º–µ—Ä—É ${phone}`,
    telegramSent,
  }
}
